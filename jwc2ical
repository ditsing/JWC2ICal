#!/usr/bin/perl -w
# Usage
# jwc2ical [class_num]
# Examples: 	jwc2ical 0903101
# 		jwc2ical 0903102 > 0903102.ics

use strict;
use LWP;
use HTML::Tree;
use HTML::TreeBuilder;
use Encode;
use Data::ICal;
use Data::ICal::Entry qw(all);
use Data::ICal::Entry::Event;
use Data::ICal::Entry::TimeZone;
use Data::ICal::Entry::TimeZone::Standard;
use Data::ICal::Entry::Alarm::Display;
use Date::ICal;
use utf8;
use encoding 'utf8';

my $browser = LWP::UserAgent->new;
my $class_num = $ARGV[0];
my $table_url = 'http://xscj.hit.edu.cn/Hitjwgl/XS/kfxqkb.asp';
my $date_url = 'http://jwc.hit.edu.cn/jwc/displaytwo.asp?ID=202';
my $time_url = 'http://jwc.hit.edu.cn/jwc/displaytwo.asp?ID=201';
my @num_name = qw{ 一 二 三 四 五 六 七 八 九 十 十一 十二};
my @num_syb = ( "\x{2474}", "\x{2475}", "\x{2476}", "\x{2477}", "\x{2478}", "\x{2479}",
	"\x{247A}", "\x{247B}", "\x{247C}", "\x{247D}", "\x{247E}", "\x{247F}", "\x{2480}",
	"\x{2481}", "\x{2482}", "\x{2483}", "\x{2484}", "\x{2485}", "\x{2486}", "\x{2487}");
my @day_name = ( "MO", "TU", "WE", "TH", "FR", "SA", "SU");

my $table = $browser->post( $table_url, [ "BH" => $class_num]);
&check( $table, $table_url);

my $date_table = $browser->get( $date_url);
&check( $date_table, $date_url);

my $time_table = $browser->get( $time_url);
&check( $time_table, $time_url);

# Now we get 3 valid tables. Although only few bytes are useful.
# Let's parse it now.
#
# The time table comes first;

my @class_times;

my $time_tree = HTML::TreeBuilder->new_from_content( decode( 'gbk', $time_table->content));

# Look for a table data who has atleast 20 sons.
# This must be the class Schedule.
my $real_time = $time_tree->look_down( '_tag', 'td', sub{ $_[0]->content_list >= 20});

my $cnt = 0;
foreach ( $real_time->look_down( '_tag', 'p', sub{ $_[0]->as_text =~ m/第.*节：.*：/}))
{

	my $now = $_->as_text;
	# I hope you konw what i am doing.
	my $re_str = '[\s]*([\d]+)[\s]*';
	$now =~ s/第[\s]*(?<count>.*?)[\s]*节：$re_str：$re_str～$re_str：$re_str/$2:$3-$4:$5/;
	if ( $+{count} eq $num_name[$cnt])
	{
		push @class_times, [ [ $2, $3], [ $4, $5]];
	}
	else
	{
		warn "Not really $cnt and $+{count} at schedule\n";
	}

	++$cnt;
}

# So the start and end time is stored in @class_times;
# Now for date table.

my $date_tree = HTML::TreeBuilder->new_from_content( decode( 'gbk', $date_table->content));

# Only the head is needed.
my $real_date = $date_tree->look_down( '_tag', 'thead');

# Get years out.
my $year_list = $real_date->look_down( '_tag', 'tr', sub { $_[0]->as_text =~ m/哈尔滨工业大学/});
my $year = $year_list->as_text;
$year =~ s/.*([\d]{4}).*/$1/;

my @month;
my @month_length;

my %look_for;
foreach ( qw( 月 周 星期一 星期日))
{
	my $name = $_;
	$look_for{$name} = sub {
		bless $_[0], "HTML::Element";
		($_[0]->content_list)[0]->as_text eq $name
	};
}

# Get months out.
my $month_list = $real_date->look_down( '_tag', 'tr', $look_for{ 月});

foreach ( ($month_list->content_list)[1..($month_list->content_list-1)])
{
	push @month, &find( [ @num_name], $_->as_text);
	push @month_length, defined $_->attr( 'colspan') ? $_->attr( 'colspan') : 1;
}

# Get weeks out.
my $week_list = $real_date->look_down( '_tag', 'tr', $look_for{ 周});
my @weeks;
my @weeks_length;

foreach ( ( $week_list->content_list)[1..($week_list->content_list-1)])
{
	my $num = &find( [ @num_syb], $_->as_text);
	push @weeks, $num ? $num + 100 : $_->as_text;
	push @weeks_length, defined $_->attr( 'colspan') ? $_->attr( 'colspan') : 1;
}

foreach ( 1..@month_length)
{
	$month_length[$_] += $month_length[$_-1];
}

foreach( 1..@weeks_length)
{
	$weeks_length[$_] += $weeks_length[$_-1];
}

die "Not so useful date html ". ( scalar $weeks_length[-1]) . " and $month_length[-1]", "\n"
	if $weeks_length[-1] != $month_length[-1];

# Get dates of mondays and sundays out.
my @monday_dates;
my $monday_list = $real_date->look_down( '_tag', 'tr', $look_for{ 星期一});

foreach ( ( $monday_list->content_list)[1..($monday_list->content_list-1)])
{
	push @monday_dates, $_->as_text;
}

my @sunday_dates;
my $sunday_list = $real_date->look_down( '_tag', 'tr', $look_for{ 星期日});

foreach ( ( $sunday_list->content_list)[1..($sunday_list->content_list-1)])
{
	push @sunday_dates, $_->as_text;
}

# We only need the first monday here.
my @first_monday;
my $month = $month[0];

# I gussed it!! This might be WRONG!!
if ( $monday_dates[0] != $sunday_dates[0] - 6 && $monday_dates[0] > 28)
{
	# Some wrong date are present, egg pain.
	--$year, $month = 12 if ( --$month == 0);
}
# Normal case
push @first_monday, $year;
push @first_monday, $month; 	 # Here is $month, not $month[0] !
push @first_monday, $monday_dates[0];

# Now it's the real class table.
my $table_tree = HTML::TreeBuilder->new_from_content( decode( 'gbk', $table->content));

# Or I may need to find out tbody.
my $real_table = $table_tree->look_down( '_tag', 'table', sub { $_[0]->content_list >= 7 } );
die "Wrong class number $class_num!" unless $real_table;

my @classes;
my %courses;
my %courses_table;
#deprecated # @classes[lesson][day][count] represents a class. 

# A class is made up of five lines: Course Name, Teacher, Classroom, Date, Time.
# @classes[count] represents a class, like $classes[0]{teacher}.
# Date means which week, which day, and what the interval is of the class.
# Time means begin and end times, in the formate ( aa:bb, cc:dd).

# We do have 6 big lessons everyday.
foreach my $i ( 1..6)
{
	my $b = $i*2;
	my $a = $b - 1;
	my $lesson = $real_table->look_down( '_tag', 'tr', sub { $_[0]->as_text =~ m/($a)-($b)节/} );
	# The first one is "a-b节", seven days a week, so 1..7.
	if ( $lesson)
	{
		foreach my $j ( 1..7)
		{
			my $data = ( $lesson->content_list)[$j];

			# Some data contains empty lines, so if there is a <tr>, there is a valid class.
			if ( $data->look_down( '_tag', 'tr'))
			{
				my @class_info = ();

				# They put them into a table, too. Painfully.
				foreach ( ( ( $data->look_down( '_tag', 'table'))[0])->content_list)
				{
					# Classes are sperated by <hr>s in each <tr>.
					if ( $_->look_down( '_tag', 'hr'))
					{
						&check_and_push( \@class_info, \@classes, $j - 1, $i - 1);
					}
					else
					{
						# There will be two ( or more) empty lines after each
						# '周考试' entry, egg pain. Ignore them.
						if ( not $_->as_text eq "")
						{
							# When ARRAY @class_info has been pushed the course name,
							# the following one is Teacher and Location.
							# Such as "王忠杰 软件工程" and "吴 锐 嵌入式"
							if ( @class_info == 1)
							{
								my @names = split /\s+/, $_->as_text;
								if ( @names != 2)
								{
									my $name;
									foreach ( @names[0..@names-2])
									{
										$name .= $_;
									}
									$names[0] = $name;
								}
								# The first and last ones are always useful.
								push @class_info, $names[0];
								push @class_info, $names[-1];
							}
							else
							{
								push @class_info, $_->as_text;
							}
						}
					}
				}

				# The last one is not followed by a <hr>
				&check_and_push( \@class_info, \@classes, $j - 1, $i - 1);
			}
		}
	}
}

# Look for a row contains '考试安排'
my $exams_table = $real_table->look_down( '_tag', 'tr', sub { $_[0]->as_text =~ m/考\s+试\s+安\s+排/} );
$exams_table = $exams_table->look_down( '_tag', 'table');
my @exams;
foreach my $exam_node ( $exams_table->look_down( '_tag', 'td'))
{
	if ( not $exam_node->as_text eq '')
	{
		my @exam_info = split /\s+/, $exam_node->as_text;
		#warn "Not expected data @exam_info" if @exam_info != 5;

		# Format is: week, date, time, location, subject. 
		# There might be spaces in name of classes.
		while ( @exam_info != 5)
		{
			$exam_info[-2] .= " " . $exam_info[-1];
			pop @exam_info;
		}

		$exam_info[0] =~ s/第(\d*)周/$1/ or warn "No accure week";
		$exam_info[1] =~ s/周日/周七/;
		$exam_info[1] =~ s/周(\d*)/$1/ or warn "No accure word on date";
		$exam_info[1] = &find( [ @num_name], $exam_info[1]) or warn "No accure date";

		my $time = $exam_info[2];

		# Say that the start time and end time are all two digits. Like 08:00-10:00.
		# As far as I know, HIT never starts an exam at 8:00 in the morning.
		# 2012 Spring, class 1104101 happened!! NO!!!!
		$time =~ m/(\d?\d):(\d\d)-(\d\d):(\d\d)/ or warn "Time format is not recognized: $time";
		# This reg exp is NOT the same as before. See ':' and '：' ? 
		
		# Replace the string with a reference.
		$exam_info[2] = [ [$1, $2], [ $3, $4]];

		$exam_info[4] .= "考试";
		my $exam = {
			week 		=> $exam_info[0],
			date 		=> $exam_info[1],
			s_time 		=> $exam_info[2][0],
			t_time 		=> $exam_info[2][1],
			location 	=> $exam_info[3],
			name 		=> $exam_info[4],
		};
		push @exams, $exam;
	}
}

# All informations are available now.
my $tz = "Asia/Shanghai"; # Or Harbin.
my $tzset = "+0800";

my $vcal = Data::ICal->new();
# Copied from export data of Google Calender.
$vcal->add_properties(
	method => "PUBLISH",
	calscale => "GREGORIAN",
	"X-WR-CALNAME" => "哈工大${class_num}班${year}年".( $month < 6 ? "春" : "秋")."季课程表",
	"X-WR-TIMEZONE" => $tz, 
);

my $vtz = Data::ICal::Entry::TimeZone->new();
$vtz->add_properties(
	tzid => $tz, 
	"X-LIC-LOCATION" => $tz,  # I think this is nothing, too.
);

my $vtz_std = Data::ICal::Entry::TimeZone::Standard->new();

$vtz_std->add_properties(
	tzoffsetfrom => $tzset,
	tzoffsetto => $tzset,
	tzname => "CST",
	dtstart => "19700101T000000"
);

$vtz->add_entry( $vtz_std);
$vcal->add_entry( $vtz);

my $first_day = Date::ICal->new(
	year 		=> $first_monday[0],
	month 		=> $first_monday[1],
	day 		=> $first_monday[2],
	offset 		=> $tzset,
);

my $now = Date::ICal->new;
my $str_now_cst = $now->ical( offset => $tzset);
my $str_now_utc = $now->ical;

# Events come here
foreach ( @classes)
{
	my %class_info = %$_;
#	print "Adding $class_info{name} from @{$class_info{s_time}} to @{$class_info{t_time}} clock ".
#	"at $class_info{week} week repeats $class_info{repeats} weeks on $day_name[$class_info{date}]\n";

	# Until now ( 2012.1), JWC does not support a class ends at the middle of a week.
	# So I do not condsider it.

	# Find out when the first class starts.
	my $first_class_start_time = $first_day->clone;
	my $first_class_end_time = $first_day->clone;

	$first_class_start_time->add(
		day    		=> $class_info{week} * 7 - 7 + $class_info{date},
		hour   		=> $class_info{s_time}[0],
		min    		=> $class_info{s_time}[1],
		sec    		=> 0,
	);

	$first_class_end_time->add(
		day    		=> $class_info{week} * 7 - 7 + $class_info{date},
		hour   		=> $class_info{t_time}[0],
		min    		=> $class_info{t_time}[1],
		sec    		=> 0,
	);

	my $class_count = $class_info{repeats};
	my $str_start = $first_class_start_time->ical( offset => $tzset);
	my $str_end = $first_class_end_time->ical( offset => $tzset);
	my $interval = $class_info{interval};
	my $rule = "FREQ=WEEKLY;COUNT=$class_count;BYDAY=$day_name[$class_info{date}];INTERVAL=$interval";

	my $vevent = Data::ICal::Entry::Event->new;
	$vevent->add_properties(
		# RFC 2445 said, dtstart/end with rrule must specify tzid
		dtstart 	=> [ $str_start, { tzid => $tz}],
		dtend	  	=> [ $str_end, { tzid => $tz}],
		rrule 		=> $rule,
		exdate 		=> [ $str_now_cst, { tzid => $tz}],			# Now
		dtstamp		=> $str_now_utc, 
		created  	=> $str_now_utc,
		description  	=> "Teacher: ".$class_info{teacher},			# Teacher
		"last-modified" => $str_now_utc,
		location 	=> $class_info{location},				# Class room
		sequence 	=> 1,
		status 		=> "CONFIRMED",
		summary 	=> $class_info{name},					# Course name
		transp 		=> "OPAQUE", 						# What is it ? 
	);

	my $valarm = Data::ICal::Entry::Alarm::Display->new();
	$valarm->add_properties(
		description 	=> "This is an event reminder",
		trigger 	=> "-P0DT0H10M0S", 					# That means -10 mins.
	);

	$vevent->add_entry( $valarm);
	$vcal->add_entry( $vevent);
}

foreach ( @exams)
{
	my %exam_info = %$_;
	my $exam_start_time = $first_day->clone;

	$exam_start_time->add(
		day 	=> $exam_info{week} * 7 - 7 + $exam_info{date} - 1,
		hour 	=> $exam_info{s_time}[0],
		min 	=> $exam_info{s_time}[1],
		sec 	=> 0,
	);

	my $exam_end_time = $first_day->clone;
	$exam_end_time->add(
		day 	=> $exam_info{week} * 7 - 7 + $exam_info{date} - 1,
		hour 	=> $exam_info{t_time}[0],
		min 	=> $exam_info{t_time}[1],
		sec 	=> 0,
	);


	my $vexam = Data::ICal::Entry::Event->new;
	$vexam->add_properties(
		dtstart 	=> $exam_start_time->ical,
		dtend	  	=> $exam_end_time->ical,
		dtstamp		=> $str_now_utc, 
		created  	=> $str_now_utc,
		description  	=> "考试",
		"last-modified" => $str_now_utc,
		location 	=> $exam_info{location},				# Class room
		sequence 	=> 1,
		status 		=> "CONFIRMED",
		summary 	=> $exam_info{name}, 					# Subject name
		transp 		=> "OPAQUE", 						# What is it ? 
	);

	my $valarm = Data::ICal::Entry::Alarm::Display->new();
	$valarm->add_properties(
		description 	=> "This is an event reminder",
		trigger 	=> "-P0DT0H10M0S", 					# That means -10 mins.
	);

	$vexam->add_entry( $valarm);
	$vcal->add_entry( $vexam);
}

print $vcal->as_string( crlf => "\n"), "\n";

exit;

sub check_and_push
{
	# Examinations are ignored and they will be processed later.
	if ( not $_[0][0] =~ m/周考试/)
	{
		warn "Not expected data @{$_[0]}" if @{$_[0]} != 4;
		my $weeks = $_[0][3];
		warn "Not recognized weeks at $weeks" if not $weeks =~ m/(\d*)-(\d*)周(\s+[（(](双|单)[)）])*/;

		# Deal with classes which is taken once every 2 weeks.
		my ( $s, $t) = ( $1, $2);
		if ( defined $3)
		{
			my $trail = $4 eq '双' ? 0 : $4 eq '单' ? 1 : -1;
			# We should not get here.
			warn "Any thing wrong with week at " . $_[0][0] . "?" if ( $trail == -1);

			$s += 1 if $s % 2 != $trail;
			$t -= 1 if $t % 2 != $trail;

			warn "Wrong week of " . $_[0][0] if $s > $t;

			$_[0][3] = [ $s, int( ( $t - $s) / 2) + 1, 2];
		}
		else
		{
			$_[0][3] = [ $s, $t - $s + 1, 1];
		}

		# Evenry big lesson last two period of time.
		push @{$_[0]}, $_[2], [ $class_times[$_[3]*2][0], $class_times[$_[3]*2+1][1]];

		# Split a class into nine parts, more clearly.
		my $class = {
			name 		=> $_[0][0],
			teacher 	=> $_[0][1],
			location 	=> $_[0][2],
			week 		=> $_[0][3][0],
			repeats		=> $_[0][3][1],
			interval 	=> $_[0][3][2],
			date 		=> $_[0][4],
			s_time 		=> $_[0][5][0],
			t_time 	  	=> $_[0][5][1],
		};

		push @{$_[1]}, $class;

		if ( not exists $courses_table{$_[0][0]})
		{
			$courses_table{$_[0][0]} = keys %courses_table;
		}
		++$courses{$_[0][0]};
		@{$_[0]} = ();
	}
}

sub find
{
	my $num = $_[0];
	foreach ( 1..@$num)
	{
		return $_ if ( $_[1] eq ${$num}[$_-1]);
	}
	return undef;
}

sub check
{
	my $response = $_[0];
	my $url = $_[1];
	die "$url error: ", $response->status_line unless $response->is_success;
	die "Weird content type at $url -- ", $response->content_type
		unless $response->content_type eq 'text/html';
#	print $response->content;

	return $response;
}

